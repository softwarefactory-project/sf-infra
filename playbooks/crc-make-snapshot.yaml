---
# Workflow:
# - localhost got file "~/.ansible_crc_vars.yaml" that contains openshift_pull_secret var,
# - localhost spawns crc.dev instance
# - crc.dev is deploying crc
# - after crc is done, comming back to localhost that is executing snapshot withname {{ snapshot_name }}
# - when the snapshot is done, remove the {{ finally_image_name }} - usually it is "centos-{{ centos_release }}-stream-crc"
# - change the "{{ snapshot_name }} to "centos-{{ centos_release }}-stream-crc"
# - remove the crc VM
#
# To setup the venv environment:
# virtualenv  -p /usr/bin/python3 crc-snapshot-venv
# source crc-snapshot-venv/bin/activate
# pip3 install ansible ansible-core==2.13.7 openstackclient python-openstackclient
# ansible-galaxy collection install  community.general community.crypto ansible.posix openstack.cloud
#
# Run playbook with following command:
#
# ansible-playbook -e "ansible_host_key_checking=False" -e "centos_release=9" playbooks/crc-make-snapshot.yaml
#
### NOTE: c8s crc image will be removed soon.
### NOTE: the c8s image does not have cloud-init installed. You need to inject the bridgesf_ssh_pub key manualy via zuul-scheduler
# ansible-playbook -e "ansible_host_key_checking=False" -e "centos_release=8" playbooks/crc-make-snapshot.yaml
#
# Additional variables:
### openstack - preparations ###
# - define image_name
# - define image_ssh_user
### crc ###
# - crc_parameters: "--memory 14336 --disk-size 60 --cpus 6"
# - testing_kernel
# - nested_virtualization
# - disable_selinux
#
# NOTE: Playbook requires: ansible-galaxy collection install openstack.cloud
# If it's not updated, it can raise an error:
# openstack.cloud.server error 'volumes is not found. openstack.compute.v2.server.Server objects do not support setting arbitrary keys through the dict interface.
#
# NOTE: The snapshot is using image: cloud-centos-9-stream-tripleo that is using
# "zuul" as regular user. More info: https://softwarefactory-project.io/r/c/software-factory/sf-infra/+/28356/comments/b4d1830e_5060e846
#
- name: Spawning a crc VM
  hosts: localhost
  tasks:
    - name: Set important facts
      ansible.builtin.set_fact:
        cloud_name: nodepool-tripleo
        flavor: ci.m1.xlarge
        ssh_keypair_name: bridgesf
        vm_name: infra-dfg-team-crc
        net_id: 7abff1a9-a103-46d0-979a-1f1e599f4f41
        finally_image_name: "centos-{{ centos_release | default('9') }}-stream-crc"
        snapshot_name: "infra-dfg-team-crc-snapshot"
        bridgesf_ssh_pub: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHj3R7JGtLkSD9h+E6JNHGdZ+SStJx+wyQsE7DK41t+Au7mfTJb12zjxBO4OwzAJbVnudN86BPYI0aHuY7ZpZ8+yitcFOBxQdczcGNistIaOHNb7bp0aPpVTYkHEYo3IlsDgPYcMVsvwOpIIDfi8wSQo3p4FNTtOc9ulAeQ7UUl4uId7ILLGzpDhkRrb+hYetJw/e3Xkqz6BW/VFbw6Tb8DdgMGhNVflQNlPz1HB60zKxeoeRkrLg3lMO/LuFHr48MtWuQ4LR13fq/tw3XgzHIBU2LL107wTtZs3KqxdqEcs9+7gAaNtT9+rbMoQvF0E9viZn+vjHOAbfxgXUEsFt7

    - name: Check if server already exists
      openstack.cloud.server_info:
        cloud: "{{ cloud_name }}"
        server: "{{ vm_name }}"
      register: _old_server_info

    - name: Fail when server already exists
      ansible.builtin.fail:
        msg: "There is already some server with name {{ vm_name }}. Please remove it first!"
      when: _old_server_info.servers != []

    - name: Take newest image for Centos stream
      shell: |
        export OS_CLOUD={{ cloud_name }}
        if [ "{{ centos_release | default('9') | int }}" -eq 9 ]; then
            openstack image list -c Name -f value | grep cloud-centos-{{ centos_release | default('9') }}-stream-tripleo | head -n1
        elif [ "{{ centos_release | default('9') | int }}" -eq 8 ]; then
            openstack image list | grep -E 'upstream-centos-8-stream-[0-9]{10}' | awk '{print $4}' | sort | tail -n1
        else
            echo "Centos release was not specified!"
            exit 1
        fi
      register: base_centos_image
      when: image_name is not defined and not image_name

    - name: "Print image that would be used for VM"
      debug:
        msg: "The VM will use {{ base_centos_image.stdout }} image"

    - name: Change finally_image_name var, if testing_kernel
      when: testing_kernel | default(false)
      set_fact:
        finally_image_name: "centos-{{ centos_release }}-stream-crc-alt-kernel"

    - name: Create VM
      openstack.cloud.server:
        state: present
        cloud: "{{ cloud_name }}"
        name: "{{ vm_name }}"
        image: "{{ image_name | default(base_centos_image.stdout) }}"
        key_name: "{{ ssh_keypair_name }}"
        timeout: 300
        flavor: "{{ flavor }}"
        nics:
          - net-id: "{{ net_id }}"
        meta:
          hostname: crc.dev
        wait: true
        config_drive: true
        security_groups:
          - default
        # Add bridgesf pub key to the remote host
        userdata: |
          #cloud-config
          users:
            - default
            - name: "{{ image_ssh_user | default('zuul') }}"
              ssh_authorized_keys:
                - "{{ bridgesf_ssh_pub }}"

    - name: Get server info
      openstack.cloud.server_info:
        cloud: "{{ cloud_name }}"
        server: "{{ vm_name }}"
      register: server_info

    - name: Fail when ip address not available
      ansible.builtin.fail:
        msg: "Can not find ip address for server {{ vm_name }}. Too many vms available or cloud provider issue?"
      when: not server_info.servers[0].access_ipv4

    - name: Add CRC host into the inventory
      ansible.builtin.add_host:
        hostname: crc.dev
        ansible_ssh_host: "{{ server_info.servers[0].access_ipv4 }}"
        ansible_ssh_port: 22
        ansible_ssh_user: "{{ image_ssh_user | default('zuul') }}"
        ansible_python_interpreter: /usr/bin/python3

    - name: Wait for SSH to be up
      ansible.builtin.wait_for:
        host: "{{ server_info.servers[0].access_ipv4 }}"
        port: 22
        delay: 10

- name: Ensure cloud init is installed and is running
  hosts: crc.dev
  tasks:
    - name: Ensure cloud init is installed
      become: true
      ansible.builtin.dnf:
        name: cloud-init
        state: present
      register: _cloud_init_install

    - name: Restart cloud init
      become: true
      ansible.builtin.systemd:
        name: cloud-init
        state: restarted
        enabled: true
      when: _cloud_init_install.changed

    - name: Reload NetworkManager
      become: true
      ansible.builtin.systemd:
        name: NetworkManager
        state: reloaded
        enabled: true
      when: _cloud_init_install.changed

# This playbook deploy crc and prepare VM to make a snapshot, that later
# can be deployed in CI.
- name: Deploy CRC
  hosts: crc.dev
  vars:
    # for extra/crc role
    crc_debug: true
    prepare_sfoperator: false
    # optional
    # crc_parameters: "--memory 14336 --disk-size 60 --cpus 6"
  pre_tasks:
    - name: Read file with openshift_pull_secret
      ansible.builtin.include_vars:
        file: ~/.ansible_crc_vars.yaml
      delegate_to: localhost

    - name: Update packages
      become: true
      ansible.builtin.yum:
        name: '*'
        state: latest

    - name: Ensure CentOS runs with selinux permissive
      become: true
      when: disable_selinux | default(false)
      ansible.posix.selinux:
        policy: targeted
        state: permissive

    - name: Enable nested virtualization
      when: nested_virtualization | default(true)
      block:
        - name: Install packages
          become: true
          ansible.builtin.yum:
            name:
              - qemu-kvm-common
            state: present

        - name: Check if CPU vendor is Intel
          ansible.builtin.shell: |
            grep -qi intel /proc/cpuinfo
          ignore_errors: true
          register: _intel_vendor

        - name: Enable nested virtualization - Intel
          become: true
          ansible.builtin.lineinfile:
            path: /etc/modprobe.d/kvm.conf
            regexp: '^#options kvm_intel nested=1'
            line: 'options kvm_intel nested=1'
          when: _intel_vendor.rc == 0
          register: _nested_intel

        - name: Enable nested virtualization - AMD
          become: true
          ansible.builtin.lineinfile:
            path: /etc/modprobe.d/kvm.conf
            regexp: '^#options kvm_amd nested=1'
            line: 'options kvm_amd nested=1'
          when: _intel_vendor.rc == 1
          register: _nested_amd

    - name: Enable testing kernel
      when: ansible_distribution_major_version == '9' and testing_kernel | default(false)
      block:
        - name: Install kernel
          become: true
          ansible.builtin.shell: |
            rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
            dnf install -y https://www.elrepo.org/elrepo-release-9.el9.elrepo.noarch.rpm
            dnf --enablerepo=elrepo-kernel install -y kernel-ml
          register: _custom_kernel

    - name: Reboot host if needed
      become: true
      ansible.builtin.reboot:
      when: _nested_intel.changed or _nested_amd.changed or _custom_kernel.changed

    - name: Wait for host to be configured after reboot
      ansible.builtin.pause:
        seconds: 10
      when: _nested_intel.changed or _nested_amd.changed or _custom_kernel.changed

    - name: Install packages - partially for TripleO
      become: true
      ansible.builtin.dnf:
        name:
          - make
          - git
          - vim
          - golang
          - tar
          - ansible-core
          - skopeo
          - sqlite
          - jq
          - podman
        state: present

  roles:
    - extra/crc

  post_tasks:
    - name: Remove pull-secret file
      ansible.builtin.file:
        path: pull-secret.txt
        state: absent

    - name: Ensure cloud-init is installed
      become: true
      ansible.builtin.yum:
        name:
          - cloud-init
          - golang
        state: present

    - name: Cleanup dnf cache
      become: true
      ansible.builtin.command: dnf clean all

    # dpawlik: for some reason, ssh local keys in /etc/ssh/ are not generated during start.
    - name: Create crontab entry to generate local ssh keys
      become: true
      ansible.builtin.copy:
        content: |
          @reboot root /usr/bin/ssh-keygen -A; systemctl start sshd
        dest: /etc/cron.d/ssh_gen
        mode: "0644"

    - name: Set proper selinux label
      become: true
      ansible.builtin.shell: |
        /usr/bin/chcon system_u:object_r:system_cron_spool_t:s0 /etc/cron.d/ssh_gen

- name: Making snapshot of CRC instance
  hosts: localhost
  tasks:
    - name: Change CRC base image
      block:
        - name: Create snapshot
          shell: |
            export OS_CLOUD={{ cloud_name }}
            openstack server image create {{ vm_name}} --name {{ snapshot_name }}

        - name: Wait until the snapshot is done
          shell: |
            export OS_CLOUD={{ cloud_name }}
            for r in {1..200}; do
                img_status=$(openstack image show {{ snapshot_name }} -c status -f value)
                if [ $img_status != 'active' ]; then
                    echo "Image is still not active, sleeping..."
                    sleep 10
                else
                    echo "Image is active!"
                fi
            done

        - name: Remove old crc image
          openstack.cloud.image:
            cloud: "{{ cloud_name }}"
            name: "{{ finally_image_name }}"
            state: absent

        - name: Change snapshot name
          shell: |
            export OS_CLOUD={{ cloud_name }}
            openstack image set {{ snapshot_name }} --name {{ finally_image_name }}

      always:
        # FIXME: should we always delete CRC vm even when it will be some failure?
        - name: Deleting instance
          openstack.cloud.server:
            name: "{{ vm_name }}"
            cloud: "{{ cloud_name }}"
            state: absent
