---
# NOTE: The playbook by default will create nested and extracted image.
#
# Basic usage:
# ansible-playbook playbooks/crc/crc-make-snapshot.yaml
#
# More controled usage:
# ansible-playbook -e "crc_version=2.48.0" -e "ansible_host_key_checking=False" -e "system_distro=centos" -e "system_release=9" playbooks/crc/crc-make-snapshot.yaml
# More info: roles/next-gen/crc-image/README.md
#
# Just create extracted CRC version, add variables:
# -e "extracted_crc=true" -e "nested_crc=false"

- name: Spawning a crc VM
  hosts: localhost
  tasks:
    - name: Set important facts
      ansible.builtin.set_fact:
        crc_host: crc.dev
        cloud_name: "{{ cloud_name | default('nodepool-tripleo') }}"
        flavor: "{{ flavor_name | default('ci.m1.xlarge') }}"
        ssh_keypair_name: "{{ ssh_keypair_name | default('image-builder') }}"
        net_id: "{{ net_id | default('7abff1a9-a103-46d0-979a-1f1e599f4f41') }}"
        vm_name: "{{ vm_name | default('infra-dfg-team-crc') }}"
        crc_version: "{{ crc_version }}"
        # Add ssh key
        ssh_pub_key: "{{ ssk_pub_key | default('') }}"
        # Or set the path for ssh pub key
        ssh_pub_path: "{{ ssh_pub_path | default ('') }}"
        # can be: centos or rhel
        system_distro: "{{ system_distro | default('centos') }}"
        # for centos: 9, for rhel: 9-2
        system_release: "{{ system_release | default(9) }}"
        # should it create nested CRC image?
        nested_crc: "{{ nested_crc | default(true) | bool }}"
        # should it create extracted CRC image?
        extracted_crc: "{{ extracted_crc | default(true) | bool }}"
        crc_use_crc_bundle: "{{ crc_use_crc_bundle | default(true) | bool }}"
        crc_nested_final_image_prefix: "{{ crc_nested_final_image_prefix | default(system_distro + '-' + system_release + '-crc-' + crc_version + '-latest') }}"
        crc_extracted_final_image_prefix: "{{ crc_extracted_final_image_prefix | default('coreos-crc-extracted-' + crc_version + '-latest') }}"
        # path for a place, where the crc extracted qcow2 image should be
        # downloaded. NOTE: It should have at least 25 GB free space
        sync_extracted_qcow2_dir: "{{ sync_extracted_qcow2_dir | default('/tmp/extracted-crc') }}"
        crc_nested_custom_packages: "{{ crc_nested_custom_packages | default([]) }}"
        crc_nested_custom_packages_disable_gpg: "{{ crc_nested_custom_packages_disable_gpg | default(false) }}"
        etcd_slow_profile: false

    - name: Set facts for image naming
      ansible.builtin.set_fact:
        # what name should have nested CRC image?
        nested_crc_snapshot_image_name: >-
          {{ crc_nested_final_image_prefix |
          default(system_distro + '-' + system_release + '-crc-' + crc_version + '-' + ansible_date_time.date + '-' + ansible_date_time.hour + '-' + ansible_date_time.minute) |
          replace('latest', ansible_date_time.date + '-' + ansible_date_time.hour + '-' + ansible_date_time.minute) }}
        #### FOR EXTRACTED VERSION ####
        extracted_crc_image_name: >-
          {{ crc_extracted_final_image_prefix |
          default('coreos-crc-extracted-' + crc_version + '-' + ansible_date_time.date + '-' + ansible_date_time.hour + '-' + ansible_date_time.minute) |
          replace('latest', ansible_date_time.date + '-' + ansible_date_time.hour + '-' + ansible_date_time.minute) }}

    - name: Check if image type is set
      when: not (nested_crc | default(true) | bool) and not (extracted_crc | default(true) | bool)
      ansible.builtin.fail:
        msg: >
          Can not continue. Variable nested_crc or extracted_crc needs
          to be set!

    - name: Check if crc_version is set
      when: not crc_version
      ansible.builtin.fail:
        msg: "The crc_version variable needs to be set!"

    - name: Check if there is already VM with such name
      ansible.builtin.include_role:
        name: next-gen/crc-image
        tasks_from: check_vm.yaml

    - name: Find newest image
      ansible.builtin.include_role:
        name: next-gen/crc-image
        tasks_from: find_image.yaml

    - name: Create a VM
      ansible.builtin.include_role:
        name: next-gen/crc-image
        tasks_from: create_vm.yaml

    - name: Get VM info
      ansible.builtin.include_role:
        name: next-gen/crc-image
        tasks_from: get_vm_info.yaml

# This playbook deploy crc and prepare VM to make a snapshot, that later
# can be deployed in CI.
- name: Deploy CRC
  hosts: crc.dev
  vars:
    crc_version: "{{ crc_version | default('2.48') }}"
    crc_etcd_slow_profile: "{{ etcd_slow_profile | default(false) }}"
  tasks:
    - name: Read file with openshift_pull_secret
      ansible.builtin.include_vars:
        file: ~/.ansible_crc_vars.yaml
      delegate_to: localhost

    - name: Ensure cloud init is installed and is running
      ansible.builtin.include_role:
        name: next-gen/crc-image
        tasks_from: prepare_vm.yaml

    - name: Enable nested virt, install other kernel and configure other packages
      ansible.builtin.include_role:
        name: next-gen/crc-image
        tasks_from: configure_vm.yaml

    - name: Install custom packages
      become: true
      ansible.builtin.yum:
        name: "{{ crc_nested_custom_packages }}"
        state: present
        disable_gpg_check: "{{ crc_nested_custom_packages_disable_gpg | bool }}"
      when: crc_nested_custom_packages

    - name: "Run CRC {{ crc_version }} deployment"
      ansible.builtin.include_role:
        name: extra/crc

    - name: Ensure cloud init is installed and snapshot would be able to boot
      ansible.builtin.include_role:
        name: next-gen/crc-image
        tasks_from: post_vm.yaml

- name: Make snapshot of CRC instance
  hosts: localhost
  tasks:
    - name: Create CRC snapshot
      block:
        # Create snapshot for nested version
        - name: Make CRC base image snapshot
          when: nested_crc | default(true) | bool
          ansible.builtin.include_role:
            name: next-gen/crc-image
            tasks_from: make_snapshot.yaml

      always:
        - name: Delete instance when extracted version will be not done
          when: not extracted_crc | default(true) | bool
          openstack.cloud.server:
            name: "{{ vm_name }}"
            cloud: "{{ cloud_name }}"
            state: absent

- name: Make extracted CRC image
  hosts: crc.dev
  vars:
    crc_use_crc_bundle: "{{ crc_use_crc_bundle | bool }}"
  tasks:
    - name: "Create extracted CRC image and upload to the Cloud provider by using crc bundle generate command {{ crc_use_crc_bundle }}"
      when: extracted_crc | default(true) | bool
      ansible.builtin.include_role:
        name: next-gen/extracted-crc

- name: Download and push extracted image
  hosts: localhost
  tasks:
    - name: Download extracted CRC qcow2 image
      block:
        - name: Pull image to the host
          when: extracted_crc | default(true) | bool
          ansible.builtin.include_role:
            name: next-gen/extracted-crc
            tasks_from: pull-image.yaml

        - name: Upload to the Cloud provider
          when: extracted_crc | default(true) | bool
          ansible.builtin.include_role:
            name: next-gen/extracted-crc
            tasks_from: create-image.yaml

      always:
        - name: Deleting instance
          openstack.cloud.server:
            name: "{{ vm_name }}"
            cloud: "{{ cloud_name }}"
            state: absent
