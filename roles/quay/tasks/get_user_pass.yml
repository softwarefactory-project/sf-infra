---
- name: Check if user exists in quay
  postgresql_query:
    login_host: "{{ postgresql_host | default('localhost') }}"
    db: quay
    login_user: "{{ postgresql_user }}"
    login_password: "{{ postgresql_password }}"
    query: SELECT * FROM public.user WHERE username = %s
    positional_args:
      - "{{ user_item.key }}"
  register: _quay_user_exist
  no_log: hide_sensitive_logs

- name: Wait for service to be running
  wait_for:
    port: 443
    host: 0.0.0.0
    delay: 20
    timeout: 300
  run_once: true

- name: Configure user
  block:
    - name: Fail when admin token is not available
      fail:
        msg: "No admin token provided: bootstrap is done, but token for admin in quay_users is not set"
      when: "admin_token is not defined and 'token' not in quay_users['admin']"

    - name: Create user {{ user_item.key }}
      uri:
        url: "https://0.0.0.0/api/v1/superuser/users/"
        body_format: json
        body: "{{ lookup('template','user.json.j2') }}"
        method: POST
        validate_certs: "{{ quay_validate_cert | default(true) }}"
        headers:
          Authorization: "Bearer {{ admin_token | default(quay_users['admin']['token']) }}"
        status_code: 200, 400
        return_content: true
      register: _user_response
      no_log: hide_sensitive_logs

    - name: Write {{ user_item.key }} to a file
      become: true
      lineinfile:
        path: "/var/data/quay/config/{{ user_item.key }}_token"
        regexp: '^export USER_PASSWORD='
        line: 'export USER_PASSWORD="{{ _user_response.json.password }}"'
        mode: "0400"
        create: true
      when: "'json' in _user_response"
      no_log: hide_sensitive_logs

  when: not _quay_user_exist.query_result

- name: Create config file - set password
  become: true
  lineinfile:
    path: "/var/data/quay/config/{{ user_item.key }}_token"
    regexp: '^export USER_PASSWORD='
    line: 'export USER_PASSWORD={{ user_item.value.password }}'
    mode: "0400"
    create: true
  no_log: hide_sensitive_logs
  when: "'password' in user_item.value and user_item.value.password != ''"

- name: Create config file - set token
  become: true
  lineinfile:
    path: "/var/data/quay/config/{{ user_item.key }}_token"
    regexp: '^export ADMIN_TOKEN='
    line: 'export ADMIN_TOKEN={{ user_item.value.token }}'
    mode: "0400"
    create: true
  no_log: hide_sensitive_logs
  when: "'token' in user_item.value and user_item.value.token != ''"
