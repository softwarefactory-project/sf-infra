---
- name: Get existing volume groups
  ansible.builtin.shell: "vgs"
  become: true
  register: _vgs

- ansible.builtin.set_fact:
    vg_create: false
  when: vg_name in _vgs.stdout

- name: Create LVM on loop device to deploy openshift storage with topolvm
  when: vg_create
  block:
    - name: Check if file already exists
      become: true
      ansible.builtin.stat:
        path: "{{ disk_file_path }}"
      register: _disk_file

    - name: Create loop disk
      when: not _disk_file.stat.exists
      block:
        - name: Create empty file
          become: true
          community.general.filesize:
            path: "{{ disk_file_path }}"
            size: "{{ disk_file_size }}"
            sparse: "{{ disk_file_sparsed }}"

        - name: Make partition on empty file
          become: true
          community.general.parted:
            device: "{{ disk_file_path }}"
            number: 1
            state: present
            flags: ["lvm"]

        - name: Get first available loop device
          become: true
          ansible.builtin.command: losetup -f
          register: loop_device
          changed_when: true

        - name: Create script to start lvm volumes after reboot
          become: true
          ansible.builtin.copy:
            src: start-lvm.sh
            dest: /usr/local/bin/start-lvm.sh
            mode: "0755"

        - name: Create loop device service
          become: true
          ansible.builtin.template:
            src: storage-loop-device.service.j2
            dest: /usr/lib/systemd/system/storage-loop-device.service
            mode: "0644"

        - name: Enable loop device service
          become: true
          ansible.builtin.systemd:
            name: storage-loop-device
            state: started
            enabled: true
            daemon_reload: true

        - name: Wait for storage-loop-device service to be active
          ansible.builtin.command: systemctl is-active storage-loop-device
          register: systemd_result
          until: "'inactive' not in systemd_result.stdout"
          retries: 10
          delay: 5

        - name: Get loop device list
          become: true
          ansible.builtin.command: losetup --list
          register: _losetup_list

        - name: Create volume group
          become: true
          community.general.lvg:
            vg: "{{ vg_name }}"
            pvs: "{{ loop_device.stdout }}"

        - name: Get information about volume groups
          become: true
          ansible.builtin.command: vgdisplay
          register: _vg_list

        - name: Ensure that loop device and volume group are present
          ansible.builtin.assert:
            that:
            - loop_device.stdout in _losetup_list.stdout
            - vg_name in _vg_list.stdout
