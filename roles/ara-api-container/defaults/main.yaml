---
# Image to deploy
# Defaults to distribution-latest which is running from Fedora 32 distribution packages
# See https://quay.io/recordsansible/ara-api for other tags
ara_api_container_image: "quay.io/recordsansible/ara-api:fedora32-distribution-latest"

# Directory where the container data (settings, logs, sqlite) is persisted on the host
ara_api_container_volume: "{{ ansible_user_dir }}/.ara/server"

# Defaults mostly taken from: https://github.com/ansible-community/ara/blob/master/roles/ara_api/defaults/main.yaml
####################################
# ara API configuration settings
# For more information, see documentation: https://ara.readthedocs.io
####################################
# ARA_BASE_DIR - Default directory for storing data and configuration
# Note: The container image is set up to use /opt/ara by default
ara_api_base_dir: "/opt/ara"

# Directory where logs are written to
ara_api_log_dir: "{{ ara_api_base_dir }}/logs"

# ARA_SETTINGS - Path to an ARA API configuration file
ara_api_settings: "{{ ara_api_base_dir }}/settings.yaml"

# ARA_ENV - Environment to load configuration for
ara_api_env: default

# ARA_READ_LOGIN_REQUIRED - Whether authentication is required for reading data
ara_api_read_login_required: false

# ARA_WRITE_LOGIN_REQUIRED - Whether authentication is required for writing data
ara_api_write_login_required: false

# ARA_PAGE_SIZE - Amount of results returned per page by the API
ara_api_page_size: 100

# ARA_LOG_LEVEL - Log level of the different components
ara_api_log_level: INFO

# ARA_LOGGING - Python logging configuration
ara_api_logging:
  disable_existing_loggers: false
  formatters:
    normal:
      format: '%(asctime)s %(levelname)s %(name)s: %(message)s'
  handlers:
    console:
      class: logging.handlers.TimedRotatingFileHandler
      formatter: normal
      level: "{{ ara_api_log_level }}"
      filename: "{{ ara_api_log_dir }}/server.log"
      when: 'midnight'
      interval: 1
      backupCount: 30
  loggers:
    ara:
      handlers:
        - console
      level: "{{ ara_api_log_level }}"
      propagate: 0
  root:
    handlers:
      - console
    level: "{{ ara_api_log_level }}"
  version: 1

# ARA_CORS_ORIGIN_ALLOW_ALL - django-cors-headers’s CORS_ORIGIN_WHITELIST_ALLOW_ALL setting
ara_api_cors_origin_allow_all: false

# ARA_CORS_ORIGIN_WHITELIST - django-cors-headers’s CORS_ORIGIN_WHITELIST setting
ara_api_cors_origin_whitelist:
  - "http://127.0.0.1:8000"
  - "http://localhost:3000"

# ARA_CORS_ORIGIN_REGEX_WHITELIST - django-cors-headers’s CORS_ORIGIN_REGEX_WHITELIST setting
ara_api_cors_origin_regex_whitelist: []

# ARA_SERVER_ALLOWED_HOSTS - Django’s ALLOWED_HOSTS setting
ara_api_allowed_hosts:
  - "127.0.0.1"
  - "localhost"
  - "::1"

# ARA_DEBUG - Django's DEBUG setting
# It is not recommended to run with debug enabled in production.
ara_api_debug: false

# ARA_SECRET_KEY - Django's SECRET_KEY setting
# Note: If no key is provided, a random one will be generated once and persisted
ara_api_secret_key: null

# ARA_DISTRIBUTED_SQLITE - Whether to enable distributed sqlite backend
ara_api_distributed_sqlite: false

# ARA_DISTRIBUTED_SQLITE_PREFIX - Prefix to delegate to the distributed sqlite backend
ara_api_distributed_sqlite_prefix: ara-report

# ARA_DISTRIBUTED_SQLITE_ROOT - Root under which sqlite databases are expected
ara_api_distributed_sqlite_root: /var/www/logs

# ARA_DATABASE_ENGINE - Django’s ENGINE database setting
ara_api_database_engine: "{{ ara_api_distributed_sqlite | ternary('ara.server.db.backends.distributed_sqlite', 'django.db.backends.sqlite3') }}"

# ARA_DATABASE_NAME - Django’s NAME database setting
ara_api_database_name: "{{ ara_api_base_dir }}/ansible.sqlite"

# ARA_DATABASE_USER - Django’s USER database setting
ara_api_database_user: null

# ARA_DATABASE_PASSWORD - Django’s PASSWORD database setting
ara_api_database_password: null

# ARA_DATABASE_HOST - Django’s HOST database setting
ara_api_database_host: null

# ARA_DATABASE_PORT - Django’s PORT database setting
ara_api_database_port: null

# ARA_DATABASE_CONN_MAX_AGE - Django's CONN_MAX_AGE database setting
ara_api_database_conn_max_age: 0

# ARA_TIME_ZONE - Time zone used when storing and returning results
# Note: the default provided by ARA is dynamic and is set to the local system
# timezone but Ansible doesn't provide, for example, an ansible_timezone fact
# that we could use here. With that in mind, UTC is the best default for now.
ara_api_time_zone: UTC

http_service_name: nginx
