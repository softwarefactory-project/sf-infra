---
- name: Create cert dirs
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: root
    state: directory
    recurse: true
  loop:
    - /var/data/quay/certs
    - /var/data/quay/config
    - /var/data/clair/config

- name: Generate self signed cert
  block:
    - name: Check if self signed cert key already exists
      ansible.builtin.stat:
        path: "/var/data/quay/certs/ssl.key"
      register: _priv_key

    - name: Generate certs for Quay if not exists
      become: true
      block:
        - name: Install required packages
          ansible.builtin.package:
            name: openssl
            state: present

        ### CA ###
        - name: Gen CA privkey
          community.crypto.openssl_privatekey:
            path: /var/data/quay/certs/rootCA.key

        - name: Generate CA csr
          community.crypto.openssl_csr:
            path: /var/data/quay/certs/rootCA.csr
            privatekey_path: /var/data/quay/certs/rootCA.key
            country_name: PL
            state_or_province_name: Quay
            locality_name: Quay
            organization_name: Software-Factory
            organizational_unit_name: Quay
            common_name: "{{ inventory_hostname }}"
            # Additional params according to
            # https://access.redhat.com/documentation/en-us/red_hat_quay/3/html/manage_red_hat_quay/using-ssl-to-protect-quay
            basic_constraints_critical: true
            basic_constraints:
              - CA:TRUE
            key_usage_critical: true
            key_usage:
              - digitalSignature
              - keyEncipherment
              - keyCertSign

        - name: Generate selfsigned CA certificate
          community.crypto.x509_certificate:
            path: /var/data/quay/certs/rootCA.pem
            csr_path: /var/data/quay/certs/rootCA.csr
            privatekey_path: /var/data/quay/certs/rootCA.key
            provider: selfsigned
          register: ownca_certificate

        ### Quay cert ###
        - name: Gen privkey
          community.crypto.openssl_privatekey:
            path: /var/data/quay/certs/ssl.key

        - name: Generate Openssl CSR
          community.crypto.openssl_csr:
            path: /var/data/quay/certs/ssl.csr
            privatekey_path: /var/data/quay/certs/ssl.key
            country_name: PL
            state_or_province_name: Quay
            locality_name: Quay
            organization_name: Software-Factory
            organizational_unit_name: Quay
            common_name: "{{ inventory_hostname }}"
            # Additional params according to
            # https://access.redhat.com/documentation/en-us/red_hat_quay/3/html/manage_red_hat_quay/using-ssl-to-protect-quay
            basic_constraints:
              - CA:FALSE
            key_usage_critical: yes
            key_usage:
              - nonRepudiation
              - digitalSignature
              - keyEncipherment
            subject_alt_name:
              - "DNS:localhost"
              - "DNS:{{ inventory_hostname }}"
              - "IP:{{ quay_ip_address | default(ansible_default_ipv4.address) }}"
            subject_alt_name_critical: true
            extended_key_usage:
              - serverAuth
              - clientAuth

        - name: Generate a self signed cert
          community.crypto.x509_certificate:
            path: /var/data/quay/certs/ssl.crt
            csr_path: /var/data/quay/certs/ssl.csr
            ownca_not_after: "+3650d"
            ownca_path: /var/data/quay/certs/rootCA.pem
            ownca_privatekey_path: /var/data/quay/certs/rootCA.key
            provider: ownca

        - name: Copy CA cert
          ansible.builtin.copy:
            src: /var/data/quay/certs/rootCA.pem
            dest: /etc/pki/ca-trust/source/anchors/rootCA.pem
            mode: "0644"
            owner: root
            group: root
            remote_src: true

        - name: Trust generated cert
          ansible.builtin.command: update-ca-trust extract

        - name: Ensure CA cert has been added
          ansible.builtin.shell: |
            trust list | grep '{{ inventory_hostname }}'
          register: _ca_trust_list

        - name: Fail when CA not added
          ansible.builtin.fail:
            msg: "Can not find self signed CA cert in trust list!"
          when: inventory_hostname not in _ca_trust_list.stdout

        - name: Create podman certs.d directory
          ansible.builtin.file:
            path: /etc/containers/certs.d/{{ inventory_hostname }}
            state: directory

        - name: Copy certs to quay config dir
          ansible.builtin.shell: |
            cp /var/data/quay/certs/ssl.crt /var/data/quay/config/ssl.cert && \
            cp /var/data/quay/certs/ssl.key /var/data/quay/config/ssl.key && \
            cp /var/data/quay/certs/rootCA.pem /var/data/quay/config/ca.crt && \
            chmod 0777 /var/data/quay/config/ && \
            cp /var/data/quay/certs/rootCA.pem /etc/containers/certs.d/{{ inventory_hostname }}/ca.crt

        - name: Copy certs to clair config dir
          ansible.builtin.shell: |
            cp /var/data/quay/certs/ssl.crt /var/data/clair/config/clair.cert && \
            cp /var/data/quay/certs/ssl.key /var/data/clair/config/clair.key && \
            chmod 0777 /var/data/clair/config/

      when: not _priv_key.stat.exists
  when: self_signed_certs

- name: Copy acme-tiny certs to quay dir
  become: true
  block:
    - name: Copy certs to quay config dir
      ansible.builtin.shell: |
        cp /etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem /var/data/quay/config/ssl.cert && \
        cp /etc/letsencrypt/live/{{ inventory_hostname }}/privkey.pem /var/data/quay/config/ssl.key && \
        chmod 0777 /var/data/quay/config/

    - name: Copy certs to clair config dir
      ansible.builtin.shell: |
        cp /etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem /var/data/quay/config/ssl.cert && \
        cp /etc/letsencrypt/live/{{ inventory_hostname }}/privkey.pem /var/data/quay/config/ssl.key && \
        chmod 0777 /var/data/quay/config/

  when: not self_signed_certs
