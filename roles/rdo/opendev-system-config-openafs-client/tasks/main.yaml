- name: Setup OS specific variable include
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}.{{ ansible_distribution_major_version }}.yaml"
        - "{{ ansible_distribution }}.yaml"
        - "{{ ansible_os_family }}.yaml"
      paths:
        - vars

- name: Increase udp buffer sizes
  ansible.builtin.copy:
    src: 99-afs-udp.conf
    dest: /etc/sysctl.d/99-afs-udp.conf
    owner: root
    group: root
    mode: '0644'
  become: yes

- name: Check config path defined
  ansible.builtin.fail:
    msg: "openafs_client_config_path not defined"
  when: not openafs_client_config_path

- name: Create configuration directory
  ansible.builtin.file:
    path: '{{ openafs_client_config_path }}'
    state: directory
  become: yes

- name: Install client base config files
  ansible.builtin.template:
    dest: '{{ openafs_client_config_path }}/{{ item }}'
    owner: root
    group: root
    mode: 0644
    src: '{{ item }}'
  loop:
    - afs.conf.client
    - CellServDB
  become: yes

- name: Install client templated config files
  ansible.builtin.template:
    dest: '{{ openafs_client_config_path }}/{{ item }}'
    owner: root
    group: root
    mode: 0644
    src: '{{ item }}.j2'
  loop:
    - cacheinfo
    - ThisCell
  become: yes

- name: Ensure cache location directory
  ansible.builtin.file:
    path: '{{ openafs_client_cache_directory }}'
    state: directory
    owner: root
    group: root
    mode: 0700
  become: yes

- name: Setup OS specific openafs-client environment
  ansible.builtin.include_tasks: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}.yaml"
        - "{{ ansible_os_family }}.yaml"
        - "default.yaml"
      paths:
        - openafs-client

- name: Ensure that openafs mod is enabled
  become: true
  block:
    - name: load openafs module
      community.general.modprobe:
        name: openafs
        state: present
  rescue:
    - name: get openafs version
      ansible.builtin.command: rpm -q --qf "%{version}-%{release}" dkms-openafs
      register: _openafs_version
      changed_when: false

    - name: Set openafs version
      ansible.builtin.set_fact:
        openafs_version: "{{ _openafs_version.stdout }}"

    - name: Ensure right value for NO_WEAK_MODULE
      ansible.builtin.lineinfile:
        path: "/usr/src/openafs-{{ openafs_version }}/dkms.conf"
        regexp: "NO_WEAK_MODULES.*"
        line: 'NO_WEAK_MODULES=yes'

    - name: Build openafs module
      ansible.builtin.command: "dkms build -m openafs -v {{ openafs_version }}"

    - name: Install openafs module
      ansible.builtin.command: "dkms install -m openafs -v {{ openafs_version }}"

    - name: load openafs module
      community.general.modprobe:
        name: openafs
        state: present

- name: Ensure openafs-client service running
  ansible.builtin.service:
    name: openafs-client
    state: started
    enabled: yes
  become: yes
