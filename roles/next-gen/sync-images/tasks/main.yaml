---
- name: Get image list
  ansible.builtin.shell: >
    openstack image list |
    grep "{{ base_image_name }}" |
    sort -k2 -r |
    head -n1 |
    awk '{print $4}'
  register: _base_image
  environment:
    OS_CLOUD: "{{ cloud_name }}"

- name: Set fact for newest base image name
  ansible.builtin.set_fact:
    newest_image_name: "{{ _base_image.stdout }}"

- name: Check if image {{ newest_image_name }} already exists in {{ parent_remote_cloud_name }}
  ansible.builtin.shell: >
    openstack image show {{ newest_image_name }}
    -c checksum
    -f value
  register: _parent_img_md5
  failed_when: _parent_img_md5.rc not in [0,1]
  environment:
    OS_CLOUD: "{{ parent_remote_cloud_name }}"

- name: Pull image to the host
  when: _parent_img_md5.rc == 1
  block:
    - name: Ensure dowload dir exists
      ansible.builtin.file:
        path: "{{ sync_extracted_qcow2_dir }}"
        state: directory

    - name: Remove old qcow2 image
      ansible.builtin.file:
        path: "{{ sync_extracted_qcow2_dir }}/crc.qcow2"
        state: absent

    - name: Download image to the host - {{ newest_image_name }}
      ansible.builtin.shell: >
        openstack image save {{ newest_image_name }}
        --file {{ sync_extracted_qcow2_dir }}/crc.qcow2
      register: _image_save
      environment:
        OS_CLOUD: "{{ cloud_name }}"

    - name: Make checksum for downloaded image
      ansible.builtin.shell: >
        md5sum {{ sync_extracted_qcow2_dir }}/crc.qcow2 | awk '{print $1}'
      register: _pull_img_md5

    - name: Get remote image checksum
      ansible.builtin.shell: >
        openstack image show {{ newest_image_name }}
        -c checksum
        -f value
      register: _remote_img_md5
      environment:
        OS_CLOUD: "{{ cloud_name }}"

    - name: Assert that download image is same as remote
      ansible.builtin.assert:
        that:
          - _pull_img_md5.stdout == _remote_img_md5.stdout

    - name: Push image {{ newest_image_name }} to {{ parent_remote_cloud_name }}
      ansible.builtin.shell: >
        openstack image create
        {{ newest_image_name }}
        --container-format bare
        --disk-format qcow2
        --file {{ sync_extracted_qcow2_dir }}/crc.qcow2
      environment:
        OS_CLOUD: "{{ parent_remote_cloud_name }}"

- name: Get image UUID
  ansible.builtin.shell: >
    openstack image show {{ newest_image_name }} -c id -f value
  environment:
    OS_CLOUD: "{{ parent_remote_cloud_name }}"
  register: _parent_img_uuid

- name: Set fact for parent image uuid
  ansible.builtin.set_fact:
    parent_img_uuid: "{{ _parent_img_uuid.stdout }}"
