---
- name: Get guest etc dir
  become: true
  ansible.builtin.shell: |
    find {{ mount_point }}/ostree/deploy/rhcos/deploy -maxdepth 1 -type d | tail -n1
  register: _etc_dir

- name: Set fact guest directories facts
  ansible.builtin.set_fact:
    guest_etc_dir: "{{ _etc_dir.stdout }}/etc"
    guest_local_dir: "{{ mount_point }}/ostree/deploy/rhcos/var/usrlocal"
    guest_home_dir: "{{ mount_point }}/ostree/deploy/rhcos/var/home/core"
    guest_var_dir: "{{ mount_point }}/ostree/deploy/rhcos/var/lib"

- name: Add service to configure dnsmasq
  when: crc_configure_dnsmasq_service
  vars:
    service: crc-pre.service
    script_name: configure-pre-crc.sh
  ansible.builtin.include_tasks: service.yaml

- name: Add service to configure cloud-init ssh keys
  when: crc_cloud_init_ssh_service
  vars:
    service: configure-cloudinit-ssh.service
    script_name: configure-cloudinit-ssh.sh
  ansible.builtin.include_tasks: service.yaml

- name: Create temp file with ssh keys
  ansible.builtin.copy:
    src: ssh-auth-keys
    dest: /tmp/ssh-auth-keys

- name: Check if authorized_keys.d ignition file exists
  become: true
  ansible.builtin.stat:
    path: "{{ guest_home_dir }}/.ssh/authorized_keys.d/ignition"
  register: _authorized_keys_ignition

# NOTE: That task is for CRC 2.19.
# NOTE: It is a workaround to provide SSH key to the extracted CRC image.
# There was an atempt with lineinfile, but after spawning VM, there was
# no key there, where the crc.qcow2 image have it.
- name: Copy temp ssh keys into guestmount location
  when: not _authorized_keys_ignition.stat.exists
  become: true
  ansible.builtin.shell: |
    cat /tmp/ssh-auth-keys >> {{ guest_home_dir }}/.ssh/authorized_keys

# NOTE: For newer CRC > 2.19
- name: Copy temp ssh keys into guestmount location when ignition file available
  when: _authorized_keys_ignition.stat.exists
  become: true
  ansible.builtin.shell: |
    cat /tmp/ssh-auth-keys >> {{ guest_home_dir }}/.ssh/authorized_keys.d/ignition

- name: Create another authorized keys just in case
  when: _authorized_keys_ignition.stat.exists
  become: true
  ansible.builtin.copy:
    src: ssh-auth-keys
    dest: "{{ guest_home_dir }}/.ssh/authorized_keys.d/zuul"
    owner: 1000
    group: 1000
    mode: "0600"

- name: Create a file with current build date
  become: true
  ansible.builtin.shell: |
    date > {{ guest_home_dir }}/image_build_date

- name: Change owner and group for image_build_date
  become: true
  ansible.builtin.file:
    path: "{{ guest_home_dir }}/image_build_date"
    state: file
    owner: 1000
    group: 1000

# NOTE: ensure that the file "/var/lib/kubelet/config.json" contains: {"data":{".dockerconfigjson":"e30K"}}
- name: Ensure that the config json is empty
  when: not crc_use_crc_bundle
  become: true
  ansible.builtin.copy:
    content: |
      {"data":{".dockerconfigjson":"e30K"}}
    dest: "{{ guest_var_dir }}/kubelet/config.json"

- name: Check if machineconfigpool dir exists
  ansible.builtin.stat:
    path: "{{ crc_bundle_dir }}/machineconfigpool"
  register: _mcp_manifests_dir

- name: Copy machineconfigpool dir
  become: true
  when: _mcp_manifests_dir.stat.exists
  ansible.builtin.copy:
    src: "{{ crc_bundle_dir }}/machineconfigpool"
    dest: "{{ guest_home_dir }}/"
    owner: 1000
    group: 1000
    remote_src: true
