# Configure the k1s service on fedora host
# Based from https://softwarefactory-project.io/cgit/software-factory/sf-config/tree/ansible/roles/sf-hypervisor-k1s/tasks/setup.yml

- name: Install requirements
  package:
    name:
      - podman
      - python3-cherrypy
      - python3-routes
      - git
      - cronie
      - openssl
      - socat
  become: true

- name: Clone the software
  git:
    repo: https://pagure.io/software-factory/k1s
    dest: /usr/src/k1s
    update: no
  become: true

- name: Clone the package
  git:
    repo: https://softwarefactory-project.io/r/rpms/k1s
    dest: /usr/src/k1s-distgit
    update: no
  become: true

- name: Install the software
  shell: |
    if [ ! -f /usr/bin/k1s ]; then
        cd /usr/src/k1s;
        python3 setup.py develop --prefix /usr/ || exit 1
    fi
  become: true

- name: Ensure mtu for default bridge
  lineinfile:
    path: /etc/cni/net.d/87-podman.conflist
    regexp: '^\s*"mtu":.*'
    insertafter: '^\s*"bridge":.*'
    line: '        "mtu": 1450,'
  become: true

- name: Create config directory
  file:
    path: /etc/k1s
    mode: 0700
    state: directory
    owner: "{{ k1s_user }}"
  become: true

- name: Install certificates
  copy:
    content: "{{ item.content }}"
    dest: "/etc/k1s/{{ item.dest }}.pem"
    mode: '0400'
    owner: "{{ k1s_user }}"
  loop:
    - content: "{{ k1s_crt }}"
      dest: "cert"
    - content: "{{ k1s_key }}"
      dest: "key"
    - content: "{{ k1s_chain }}"
      dest: "chain"
  become: true

- name: Setup configuration
  copy:
    content: |
      K1S_TOKEN={{ k1s_token }}
      K1S_TLS_PATH=/etc/k1s
    dest: /etc/sysconfig/k1s
    mode: '0400'
    owner: "{{ k1s_user }}"
  become: true

- name: Install the service
  copy:
    remote_src: true
    src: /usr/src/k1s-distgit/k1s.service
    dest: /etc/systemd/system/k1s.service
  become: true

- name: Install the user service
  when: k1s_user != 'root'
  vars:
    k1s_systemd_base: "/home/{{ k1s_user }}/.config/systemd/user"
  block:
    - file:
        path: "{{ k1s_systemd_base }}"
        state: directory
    - copy:
        remote_src: true
        src: /usr/src/k1s-distgit/k1s.service
        dest: "{{ k1s_systemd_base }}/k1s.service"

- name: Start service
  when: k1s_user == 'root'
  service:
    name: k1s
    state: started
    enabled: yes
    daemon-reload: true
  become: true

- name: Start the user service
  when: k1s_user != 'root'
  systemd:
    name: k1s
    scope: user
    state: started
    enabled: yes
    daemon_reload: true

- name: Add periodic job to prune unused podman images
  cron:
    name: "podman-image-prune"
    user: "{{ k1s_user }}"
    minute: "0"
    hour: "2"
    job: 'podman image prune'
  become: true
