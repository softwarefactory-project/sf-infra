---
# Configure the k1s service on fedora host
# Based from https://softwarefactory-project.io/cgit/software-factory/sf-config/tree/ansible/roles/sf-hypervisor-k1s/tasks/setup.yml

- name: Install requirements
  ansible.builtin.package:
    name:
      - podman
      - python3-cherrypy
      - python3-routes
      - git
      - cronie
      - openssl
      - socat
  become: true

- name: Create configuration group
  ansible.builtin.group:
    name: k1s
  become: true

- name: Ensure user is in the group
  ansible.builtin.user:
    name: "{{ k1s_user }}"
    append: yes
    groups:
      - k1s
  become: true

- name: Clone the software
  ansible.builtin.git:
    repo: https://softwarefactory-project.io/r/software-factory/k1s
    dest: /usr/src/k1s
    update: yes
    version: "{{ k1s_version }}"

  become: true

- name: Install the software if missing
  ansible.builtin.shell: |
    if [ ! -f /usr/bin/k1s ]; then
        cd /usr/src/k1s;
        python3 setup.py develop --prefix /usr/ || exit 1
    fi
  become: true

- name: Upgrade k1s if version changed
  ansible.builtin.shell: |
    if [[ $(/usr/bin/k1s version) != {{ k1s_version }} ]]; then
      cd /usr/src/k1s;
      python3 setup.py develop --prefix /usr/ || exit 1
    fi
  become: true


- name: Ensure mtu for default bridge
  ansible.builtin.lineinfile:
    path: /etc/cni/net.d/87-podman.conflist
    regexp: '^\s*"mtu":.*'
    insertafter: '^\s*"bridge":.*'
    line: '        "mtu": 1450,'
  become: true
  # It seems like recent podman no longer use this bridge. Let's ignore the error for now, and let's remove that task later.
  failed_when: false

- name: Create config directory
  ansible.builtin.file:
    path: /etc/k1s
    mode: 0770
    state: directory
    group: k1s
  become: true

- name: Install certificates
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "/etc/k1s/{{ item.dest }}.pem"
    mode: '0440'
    group: k1s
  loop:
    - content: "{{ k1s_crt }}"
      dest: "cert"
    - content: "{{ k1s_key }}"
      dest: "key"
    - content: "{{ k1s_chain }}"
      dest: "chain"
  no_log: true
  become: true

# TODO: remove root support once sf-container-worker is migrated to userns.
- name: Install the service
  when: k1s_user == 'root'
  become: true
  block:
    - ansible.builtin.copy:
        content: |
          K1S_TOKEN={{ k1s_token|trim }}
          K1S_PORT={{ k1s_port }}
          K1S_TLS_PATH=/etc/k1s
        dest: /etc/sysconfig/k1s
        mode: '0400'
      no_log: true
    - ansible.builtin.copy:
        remote_src: true
        src: /usr/src/k1s/k1s.service
        dest: /etc/systemd/system/k1s.service

- name: Install the user service
  when: k1s_user != 'root'
  become: yes
  block:
    - name: ensure XDG is persisted
      ansible.builtin.command: "loginctl enable-linger {{ k1s_user }}"
    - ansible.builtin.copy:
        remote_src: true
        content: |
          [Unit]
          Description=K1S {{ k1s_user }} service
          After=network.target

          [Service]
          Type=simple
          SyslogIdentifier=k1s
          User={{ k1s_user }}
          Environment="K1S_TOKEN={{ k1s_token|trim }}"
          Environment="K1S_PORT={{ k1s_port }}"
          Environment="K1S_TLS_PATH=/etc/k1s"
          ExecStart=/usr/bin/k1s

          [Install]
          WantedBy=multi-user.target
        dest: "/etc/systemd/system/k1s-{{ k1s_user }}.service"
      no_log: true

- name: Start service
  when: k1s_user == 'root'
  ansible.builtin.service:
    name: k1s
    state: started
    enabled: yes
    daemon-reload: true
  become: true

- name: Start the user service
  when: k1s_user != 'root'
  become: yes
  ansible.builtin.service:
    name: "k1s-{{ k1s_user }}"
    state: started
    enabled: yes
    daemon-reload: true

- name: Add periodic job to prune unused podman images
  ansible.builtin.cron:
    name: "podman-image-prune"
    state: absent
  become: true

# NOTE: To increase/change zram swap immediately, do:
# sudo swapoff -a
# sudo zramctl /dev/zram0 -s 16G
# sudo mkswap /dev/zram0
# sudo swapon /dev/zram0
- name: Create zram generator
  when: ansible_facts.distribution | default('') | lower == "fedora"
  become: true
  ansible.builtin.copy:
    content: |
      [zram0]
      zram-size = min(ram, {{ swap_size }})
    dest: /etc/systemd/zram-generator.conf
    mode: "0644"
    owner: root
    group: root

- name: Add motd info
  become: true
  ansible.builtin.copy:
    content: |
      ################################################

      Welcome on K1S host!

      Remember to use "{{ k1s_user }}" user to check k1s pods!

      ################################################
    dest: /etc/motd
    mode: "0644"

- name: Add crontab to remove unused containers
  become: true
  ansible.builtin.cron:
    name: Remove unused containers
    minute: "0"
    hour: "23"
    user: "{{ k1s_user }}"
    state: present
    job: /usr/bin/podman kill $(/usr/bin/podman ps -a | /usr/bin/grep -i 'sleep inf' | /usr/bin/awk '/weeks|days|2[4-9] hours|[3-4][0-9] hours/ {print $1}')

- name: Create probe for checking old containers
  ansible.builtin.include_tasks: probe.yaml

# More info: https://access.redhat.com/solutions/7011470
# To check if enabled: loginctl user-status | grep -m1 Linger
- name: Enable linger
  become: true
  ansible.builtin.shell: |
    loginctl enable-linger {{ ansible_user }}
