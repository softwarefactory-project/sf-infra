---
- name: Check if k9s is already there
  ansible.builtin.stat:
    path: /usr/local/bin/k9s
  register: _k9s_exists

- name: Check k9s version if present
  when: _k9s_exists.stat.exists
  ansible.builtin.command:
      k9s version
  register: _k9s_current_version

- name: Get k9s if not available or not at the right version
  when: not _k9s_exists.stat.exists or (_k9s_current_version is defined and k9s_version not in _k9s_current_version.stdout)
  block:
    - name: Create temporary dl folder
      ansible.builtin.tempfile:
        state: directory
        suffix: k9s
      register: k9s_dl_dir
    - name: Download release from GitHub
      ansible.builtin.get_url:
        url: "https://github.com/derailed/k9s/releases/download/{{ k9s_version }}/k9s_Linux_amd64.tar.gz"
        dest: "{{ k9s_dl_dir.path }}/k9s_Linux_amd64.tar.gz"

    - name: Unarchive k9s binary
      ansible.builtin.unarchive:
        src: "{{ k9s_dl_dir.path }}/k9s_Linux_amd64.tar.gz"
        dest: "{{ k9s_dl_dir.path }}/"
        remote_src: yes

    - name: Move k9s binary to /usr/local/bin
      become: true
      ansible.builtin.copy:
        src: "{{ k9s_dl_dir.path }}/k9s"
        dest: /usr/local/bin/k9s
        mode: a+x
        remote_src: yes

    - name: Clean up leftover files
      loop:
        - "{{ k9s_dl_dir.path }}"
        # residuals from previous means of installation
        - "{{ ansible_user_dir }}/.local/bin/k9s"
        - "{{ ansible_user_dir }}/go/bin/k9s"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
