- name: Remove other lets encrypt tools
  become: true
  ansible.builtin.package:
    name:
      - lecm
      - certbot
    state: absent

- name: Remove crontab jobs if available
  ansible.builtin.cron:
    name: "{{ item }}"
    state: absent
  loop:
    - "Renew let's encrypt with lecm"

- name: Install acme-tiny
  become: true
  ansible.builtin.package:
    name: acme-tiny
    state: present

- name: "Ensure directory {{ acme_keys_dir }} exists"
  become: true
  ansible.builtin.file:
    mode: "0700"
    owner: root
    path: "{{ acme_keys_dir }}"
    state: directory

- name: "Ensure directory {{ acme_certs_dir }} exists"
  become: true
  ansible.builtin.file:
    mode: "0755"
    owner: root
    path: "{{ acme_certs_dir }}"
    state: directory

- name: "Run openssl genrsa 4096 for: {{ acme_keys_dir }}/account.key"
  become: true
  ansible.builtin.shell:
    cmd: "openssl genrsa --out {{ acme_keys_dir }}/account.key 4096"
    creates: "{{ acme_keys_dir }}/account.key"

- name: "Run openssl genrsa 4096 for: {{ acme_keys_dir }}/{{ item.domain }}.key"
  become: true
  loop: "{{ acme_domains }}"
  ansible.builtin.shell:
    cmd: "openssl genrsa --out {{ acme_keys_dir }}/{{ item.domain }}.key 4096"
    creates: "{{ acme_keys_dir }}/{{ item.domain }}.key"

- name: 'Run openssl req -new -sha256 -key {{ acme_keys_dir }}/{{ item.domain }}.key -subj "/CN={{ item.domain }}" for: {{ acme_keys_dir }}/{{ item.domain }}.csr'
  become: true
  loop: "{{ acme_domains }}"
  ansible.builtin.shell:
    cmd: 'openssl req -new -sha256 -key {{ acme_keys_dir }}/{{ item.domain }}.key -subj "/CN={{ item.domain }}" > {{ acme_keys_dir }}/{{ item.domain }}.csr'
    creates: "{{ acme_keys_dir }}/{{ item.domain }}.csr"

- name: "Ensure directory {{ acme_challenges_dir }}/{{ item.domain }} exists"
  become: true
  loop: "{{ acme_domains }}"
  ansible.builtin.file:
    mode: "0755"
    owner: root
    path: "{{ acme_challenges_dir }}/{{ item.domain }}"
    state: directory

- name: "Ensure directory {{ item.vhost_root }} exists"
  become: true
  loop: "{{ acme_domains }}"
  when: "item.vhost_root is defined"
  ansible.builtin.file:
    mode: "0755"
    owner: "{{ acme_vhost_owner }}"
    path: "{{ item.vhost_root }}"
    state: directory

- name: Check if cert exists
  become: true
  loop: "{{ acme_domains }}"
  register: "_cert_files"
  ansible.builtin.stat:
    path: "{{ acme_certs_dir }}/{{ item.domain }}.pem"

- name: Install vhost configuration
  become: true
  loop: "{{ acme_domains }}"
  register: "_vhost_conf"
  ansible.builtin.template:
    dest: "/etc/httpd/conf.d/{% if item.sf_gateway is defined and item.sf_gateway %}gateway{% else %}{{ item.domain }}{% endif %}.conf"
    src: vhost.conf
  when: not item.vhost_skip|default(false)

- name: Reload apache
  when: "_vhost_conf is changed"
  become: true
  ansible.builtin.service:
    name: httpd
    state: reloaded

# NOTE(dpawlik): We don't care how many domains are set to refresh.
# We just need to know if the script should be executed now or it
# can wait for crontab.
- name: Check if cert was already created
  ansible.builtin.stat:
    path: "{{ acme_certs_dir }}/{{ acme_domains[0] }}.pem"
  register: _acme_cert

- name: Setup acme-tiny refresh script /usr/local/bin/acme-tiny-refresh.sh
  become: true
  register: "_acme_tiny_script"
  ansible.builtin.template:
    dest: /usr/local/bin/acme-tiny-refresh.sh
    mode: "0755"
    src: acme-tiny-refresh.sh

- name: Run the acme-tiny script
  become: true
  ansible.builtin.command: /usr/local/bin/acme-tiny-refresh.sh no-reload
  when: "_acme_tiny_script is changed and not _acme_cert.stat.exists"

- name: Create cronjob for refreshing certs
  become: true
  ansible.builtin.cron:
    job: /usr/local/bin/acme-tiny-refresh.sh no-reload > /dev/null
    name: Run acme tiny refresh script
    special_time: weekly

- name: Check if cert exists
  become: true
  loop: "{{ acme_domains }}"
  register: "_cert_files"
  ansible.builtin.stat:
    path: "{{ acme_certs_dir }}/{{ item.domain }}.pem"

- name: Install vhost configuration
  become: true
  loop: "{{ acme_domains }}"
  register: "_vhost_conf"
  ansible.builtin.template:
    dest: "/etc/httpd/conf.d/{% if item.sf_gateway is defined and item.sf_gateway %}gateway{% else %}{{ item.domain }}{% endif %}.conf"
    src: vhost.conf
  when: not item.vhost_skip|default(false)

- name: Reload apache
  when: "_vhost_conf is changed"
  become: true
  ansible.builtin.service:
    name: httpd
    state: reloaded
