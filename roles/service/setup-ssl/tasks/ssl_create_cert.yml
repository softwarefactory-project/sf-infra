---
#   Copyright Red Hat, Inc. All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may
#   not use this file except in compliance with the License. You may obtain
#   a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.
#

- name: Check for existing certificates
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ cert_item.value.domain }}"
  register: cert

- name: Ensure cert webroot dir exists
  ansible.builtin.file:
    path: "{{ cert_item.value.webroot | default('/var/www/html') }}"
    state: directory


- name: Create httpd config to handle certificate creation if cert_item.value.webroot is not /var/www/html
  block:
    - name: Create httpd config
      ansible.builtin.copy:
        dest: "/etc/httpd/conf.d/certbot.conf"
        content: |
          <VirtualHost *:80>
              DocumentRoot "{{ cert_item.value.webroot }}"
              ServerName {{ cert_item.value.domain }}
          </VirtualHost>
      register: _temp_httpd_config

    - name: Restart httpd
      ansible.builtin.systemd:
        name: "{{ http_service_name }}"
        state: restarted
  when:
    - "'webroot' in cert_item.value"
    - cert_item.value.webroot != "/var/www/html"
    - http_service_name == 'httpd'
    - not cert.stat.exists

- name: Generate certificate
  ansible.builtin.command: "certbot certonly {{ certbot_plugin }} -m {{ cert_item.value.email }} --agree-tos -n -d {{ cert_item.value.domain }} {{ additional_params | default('') }}"
  when: not cert.stat.exists

- name: Remove httpd config when cert_item.value.webroot is not /var/www/html
  block:
    - name: Remove httpd config
      ansible.builtin.file:
        path: "/etc/httpd/conf.d/certbot.conf"
        state: absent

    - name: Restart httpd
      ansible.builtin.systemd:
        name: "{{ http_service_name }}"
        state: restarted
  when:
    - _temp_httpd_config is defined | default(False)
    - http_service_name == 'httpd'

- name: Create cron job for automatic cert renewal
  ansible.builtin.cron:
    name: "Automatic SSL cert renew for {{ cert_item.value.domain }}"
    minute: "{{ 60 | random }}"
    hour: "0"
    weekday: "0"
    user:  "root"
    job: " /usr/bin/certbot certonly -a webroot --keep-until-expiring -d {{ cert_item.value.domain }} --webroot-path {{ cert_item.value.webroot | default('/var/www/html') }} {{ additional_params | default('') }} && /usr/bin/systemctl reload {{ http_service_name | default('httpd') }} > /dev/null"
  when: http_service_name != 'standalone'
